pipeline {
    agent {
        kubernetes {
            yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: docker
    image: 508058148115.dkr.ecr.us-east-1.amazonaws.com/jenkins:latest
    command:
    - cat
    tty: true
    volumeMounts:
    - mountPath: /var/run/docker.sock
      name: docker-sock
    - mountPath: /home/jenkins/agent
      name: workspace-volume
  volumes:
  - name: docker-sock
    hostPath:
      path: /var/run/docker.sock
  - name: workspace-volume
    emptyDir: {}
"""
        }
    }
    environment {
        ECR_REPO_URL = '508058148115.dkr.ecr.us-east-1.amazonaws.com'
        BUILD_TAG = "${env.BUILD_ID}"
    }
    stages {
        // stage('Scan Dependencies') {
        //     steps {
        //         container('docker') {
        //             sh '''
        //                 pip3 install safety
        //                 safety check -r requirements.txt
        //             '''
        //         }
        //     }
        // }
        stage('Docker Build and Push') {
            steps {
                container('docker') {
                    sh '''
                        echo "Logging into ECR..."
                        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 508058148115.dkr.ecr.us-east-1.amazonaws.com
                        echo "Building Docker image..."
                        docker build -f services/Dockerfile -t ${ECR_REPO_URL}/movies-service:${BUILD_TAG} .
                        echo "Pushing Docker image to ECR..."
                        docker push ${ECR_REPO_URL}/movies-service:${BUILD_TAG}
                    '''
                }
            }
        }
        stage('Test') {
            steps {
                container('docker') {
                    sh '''
                        # Stop and remove any container using port 5001
                        existing_container=$(docker ps -q --filter "publish=5001")
                        if [ -n "$existing_container" ]; then
                        docker stop $existing_container
                        docker rm $existing_container
                        fi
                        
                        # Run the test container
                        docker run -d -p 5001:5001 ${ECR_REPO_URL}/movies-service:${BUILD_TAG}
                        
                        # Run pytest
                        pytest tests/*
                        
                        # Clean up the test container after running tests
                        docker ps -q --filter "publish=5001" | xargs -r docker stop
                    '''
                }
            }
        }
        stage('Deploy') {
            steps {
                container('docker') {
                    sh '''
                    helm upgrade --install movies-service ./deploy/movies-service \
                        --set image.repository=508058148115.dkr.ecr.us-east-1.amazonaws.com/movies-service \
                        --set image.tag=latest \
                        -n default
                    '''
                }
            }
        }
    }
}