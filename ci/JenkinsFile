pipeline {
    agent {
        kubernetes {
            yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: docker
    image: 508058148115.dkr.ecr.us-east-1.amazonaws.com/jenkins:latest
    command:
    - cat
    tty: true
    volumeMounts:
    - mountPath: /var/run/docker.sock
      name: docker-sock
    - mountPath: /home/jenkins/agent
      name: workspace-volume
  volumes:
  - name: docker-sock
    hostPath:
      path: /var/run/docker.sock
  - name: workspace-volume
    emptyDir: {}
"""
        }
    }
    environment {
        ECR_REPO_URL = '508058148115.dkr.ecr.us-east-1.amazonaws.com'
        BUILD_TAG = "${env.BUILD_ID}"
    }
    stages {
        stage('Scan Dependencies') {
            steps {
                container('docker') {
                    sh '''
                        safety check -r requirements.txt
                    '''
                }
            }
        }
        stage('Docker Build and Push') {
            steps {
                container('docker') {
                    sh '''
                        echo "Logging into ECR..."
                        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${ECR_REPO_URL}
                        echo "Building Docker image..."
                        docker build -f services/Dockerfile -t ${ECR_REPO_URL}/movies-service:${BUILD_TAG} .
                        echo "Pushing Docker image to ECR..."
                        docker push ${ECR_REPO_URL}/movies-service:${BUILD_TAG}
                    '''
                }
            }
        }
        stage('Test') {
            steps {
                container('docker') {
                    sh '''
                        echo "Docker PS Output:"
                        docker ps
        
                        echo "Stopping and Removing Any Existing movies-service Containers..."
                        docker rm -f movies-service || true
        
                        echo "Running the Container..."
                        docker run -d --name movies-service -p 5001:5001 ${ECR_REPO_URL}/movies-service:${BUILD_TAG}
        
                        echo "Checking Container Logs:"
                        docker logs movies-service || true
                        
                        echp "sleep Until Container is up"
                        sleep 5
                        
                        export CONTAINER_IP=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' movies-service):5001

                        echo "Curl Health Check:"
                        curl -v http://$CONTAINER_IP:5001/health || exit 1
        
                        echo "Running Tests:"
                        pytest tests/movies.py
                    '''
                }
            }
        }
        stage('Deploy') {
            steps {
                container('docker') {
                    sh '''
                    helm upgrade --install movies-service ./deploy/movies-service \
                        --set image.repository=${ECR_REPO_URL}/movies-service \
                        --set image.tag=${BUILD_TAG} \
                        -n default
                    '''
                }
            }
        }
    }
}